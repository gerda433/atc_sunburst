---
title: "Visual sunburst plot of the ATC code hierarchy"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false



```

The `echo: false` option disables the printing of code (only output is displayed).

# Required packages

```{r, message=FALSE, warning=FALSE}
library(dplyr)
library(stringr)
library(readr)
library(readxl)
library(purrr)
library(plotly)
library(data.table)
library(htmlwidgets)
library(tidyr)

source("R/functions.R")
```

### Read atc_levels

This version of the ATC hierarchy has been created from the 2024 file from this place and the updates published on the WHO website

```{r, message=FALSE}
# read:
atc_levels <- read_csv("input/WHO_ATC_Hierarchy_wide_2025-09-16.csv") 
```

An overview of structure of the data file is given below.

```{r}
glimpse(atc_levels)
```

## EMA indications

Next it would be nice if I could add indication to the hover information:

```{r}
ema_medicines_raw <- medicines_output_medicines_en_2 <- read_excel("input/medicines_output_medicines_en-2.xlsx", skip = 8)

ema_medicines_names <- ema_medicines_raw %>%
  janitor::clean_names()  

ema_medicines <- ema_medicines_names %>%
  rename(therapeutic_area = therapeutic_area_me_sh) %>%
  select(name_of_medicine, active_substance, atc_code_human, therapeutic_indication, therapeutic_area, marketing_authorisation_date) %>%
  mutate(active_substance = str_to_lower(active_substance), 
         therapeutic_indication = str_replace_all(therapeutic_indication, "(.{1,60})(\\s|$)", "\\1<br>"),
         marketing_authorisation_date = format(as.Date(marketing_authorisation_date, format = "%d/%m/%Y"), format = "%d/%m/%Y")) %>%
  distinct(name_of_medicine, .keep_all = TRUE) %>%
  mutate(drug_information = paste0("<b>", name_of_medicine, "</b> - centrally authorised (EMA)<Br>", "<b>Date authorised</b><Br>", marketing_authorisation_date, "<Br><b>Indication(s)</b><Br>", str_replace_all(therapeutic_area, ";", "<Br>")))
```

## DKMA data

```{r}
dkma_medicines_raw <- read_excel("input/ListeOverGodkendteLaegemidler-2.xlsx")
```

First, prepare for a rowbind.

```{r}
columns <- names(ema_medicines)

dkma_medicines <- dkma_medicines_raw %>%
 # filter(!(Navn %in% ema_medicines$name_of_medicine)) %>%
  mutate(name_of_medicine = Navn,
         active_substance = str_to_lower(AktiveSubstanser),
         atc_code_human = `ATC-kode`,
         therapeutic_indication = NA,
         therapeutic_area = NA,
         marketing_authorisation_date = format(as.Date(Registreringsdato), "%d-%m-%Y"), 
         drug_information = paste0("<b>", name_of_medicine, "</b><Br>", "<b>DK registration date</b><Br>", marketing_authorisation_date)) %>%
  select(all_of(columns)) %>%
  distinct(name_of_medicine, .keep_all = TRUE)
```

Second, bind_rows

```{r}
combined_ema_dkma <- bind_rows(ema_medicines, dkma_medicines) 
saveRDS(combined_ema_dkma, file = "output/combined_ema_dkma.RDS")
```

# Prepare plot

Next, turn it into a dataframe in the format that can be used for the plotly sunburst plot:

```{r}
# I need a little work-around to get the format I need. Might be better ways out there
# original code version:
df <- atc_levels %>%
  mutate(value = 1) %>%
  select(atc_level_01, atc_level_03, atc_level_04, atc_level_05, chemical_substance, value)

# text version:
df_text <- atc_levels %>%
  mutate(value = 1) %>%
  select(anatomical_main_group_01, therapeutic_subgroup_02, pharmacological_subgroup_03, chemical_subgroup_04, chemical_substance, value)

df_code <- atc_levels %>%
  mutate(value = 1) %>%
  select(atc_level_01, atc_level_03, atc_level_04, atc_level_05, atc_code, value)
```

## Plotly

The plotly plot

```{r}
# Apply his function to the dataset:
hierarchyDF <- create_sunburst_data_format(df, value_column = "value", add_root = TRUE)

hierarchyDF_code <- create_sunburst_data_format(df_code, value_column = "value", add_root = TRUE)

# To create the relevant hover information, the next step is a little unusual, probably a better solution out there:
hierarchyDF_text <- create_sunburst_data_format(df_text, value_column = "value", add_root = TRUE) %>%
  mutate(
    hover_info = sapply(ids, function(x) {
      parts <- str_split(x, " - ")[[1]]   # split by " - "
      str_trim(tail(parts, 1))            # take last segment, trim spaces
    }),
  ids_text = ids) 

#%>%
#    mutate(hover_info = str_replace(hover_info, "^(.)", toupper))

# now we can use the hover info in the actual dataset we want to use::      
sunburst_df <- hierarchyDF %>%
  mutate(hover_info = hierarchyDF_text$hover_info,
         atc_code = case_when(nchar(hierarchyDF_code$labels) == 7 ~ hierarchyDF_code$labels, 
                              .default = NA),
         ids_text = hierarchyDF_text$ids_text) %>%
  arrange(desc(labels)) 

saveRDS(sunburst_df, "input/sunburst_df.RDS")

write_csv(sunburst_df, "input/sunburst_df.csv")



```

```{r}
# combined with info fromt this file:
combined_ema_dkma <- readRDS("output/combined_ema_dkma.RDS")


ema_dkma_wide <- combined_ema_dkma %>%
  group_by(atc_code_human) %>%
  summarise(products1 = paste(unique(drug_information), collapse = "<Br><Br>")) %>%
  ungroup() %>%
  distinct()


sunburst_df_hover <- sunburst_df %>%
  left_join(ema_dkma_wide %>% 
              filter(nchar(atc_code_human) == 7), 
            join_by(atc_code == atc_code_human)) 


sunburst_hover2 <- sunburst_df_hover %>%
  mutate(hover_info = case_when(ids == "Total" ~ "ATC",
                                !is.na(products1) ~ paste0(atc_code, " - ", hover_info, ":<Br><Br>", products1),
                                is.na(products1) & nchar(atc_code) == 7 ~ paste0(atc_code, "<Br>", hover_info),
                                .default = hover_info),
         labels = case_when(ids == "Total" ~ "ATC",
                                .default = labels)) %>%
  select(-products1)


saveRDS(sunburst_hover2, file = "output/sunburst_dataframe.RDS")
```

```{r}
p <- plot_ly(
  sunburst_hover2,
  ids = ~ids,
  labels = ~labels,
  parents = ~parents,
  values = ~values,
  type = "sunburst",
  branchvalues = "total",
  hovertext = ~hover_info,   # <- point to your custom column
  hoverinfo = "text", 
  sort = FALSE,
  rotation = 90)   # rotate 90 degrees clockwise, so top is north

p
```

Save the html:

```{r}
# Export as HTML
saveWidget(
  p,
  file = "ATC_Sunburst.html",
  selfcontained = TRUE
)

#message("Interactive sunburst exported to output/ATC_Sunburst.html")
```

```{r}

sunburst_hover2 <- readRDS("output/sunburst_dataframe.RDS")

hierarchy <- sunburst_hover2 %>%
  separate(ids_text, into = paste0("level", 1:6), sep = " - ", fill = "right") %>%
  separate(ids, into = paste0("atc_level", 1:6), sep = " - ", fill = "right", remove = FALSE) %>%
  mutate(atc_level6 = atc_code, 
         atc_level1 = atc_level2) 

saveRDS(hierarchy, file = "output/atc_hierarchy.rds")
```

```{r}
p <- plot_ly(
  hierarchy,
  ids = ~ids,
  labels = ~labels,
  parents = ~parents,
  values = ~values,
  type = "sunburst",
  branchvalues = "total",
  hovertext = ~hover_info,   # <- point to your custom column
  hoverinfo = "text", 
  sort = FALSE,
  rotation = 90)   # rotate 90 degrees clockwise, so top is north

p
```
